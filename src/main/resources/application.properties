spring.application.name=jobfinder
#h2
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop

# DataSource settings: set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5432/jobFinder
spring.datasource.username=admin
spring.datasource.password=password
spring.jpa.database=POSTGRESQL

# Hibernate settings
# Automatically create the necessary tables
spring.jpa.hibernate.ddl-auto=update

# Additional properties
# Show SQL queries in the logs
spring.jpa.show-sql=true


#Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#docker Commands
# mvn spring-boot:build-image "-Dspring-boot.build-image.imageName=ashlesh1910/jobfinderimage"

# docker push ashlesh1910/jobfinderimage

# docker images

# docker run -p 8080:8080 ashlesh1910/jobfinderimage

# docker ps

# docker stop

#--Manual CMD--
# docker network create my-network

# docker run -d --name db --network my-network -e POSTGRES_PASSWORD=mysecretpassword postgres

# docker run -d --name pgadmin --network my-network -e PGADMIN_DEFAULT_EMAIL=mithur@example.com -e PGADMIN_DEFAULT_PASSWORD=Supersecret -d dpage/pgadmin4

# docker exec -it pgadmin ping db

#--Manual CMD--

# You can also create a YAML file (docker-compose.yaml)

# docker compose up -d

# docker logs pgadmin_container